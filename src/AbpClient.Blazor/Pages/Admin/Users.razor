@page "/admin/users"
@using BlazorBoilerplate.Shared
@using Bamboo.AbpClient
@using AbpHelper.Users.Dto
@inject IdentityAuthenticationStateProvider authState
@inject HttpClient Http
@inject IMatToaster matToaster
@inject AbpCoreService  abpCoreService
<h1>Users</h1>
<p>This admin page is under construction. It is not connected to the live dataset and is not fully functional.</p>
@if (IsLoggedIn)
{
    @if (users == null)
    {
        <LoadingBackground ShowLogoBox="true">
            <label>Loading Users</label>
        </LoadingBackground>
    }
    else
    {
        <MatTable Class="mat-elevation-z5" Items="@users" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" DebounceMilliseconds="150">
            <MatTableHeader>
                <th><MatButton Icon="person_add" Label="New User" OnClick="@((e) => OpenDialog())"></MatButton></th>
                <th>User Name</th>
                <th>Email</th>
                <th>Roles</th>
            </MatTableHeader>
            <MatTableRow>
                <td>
                    <div style="width:130px;">
                        <MatIconButton Icon="edit" OnClick="@((e) => Edit(@context.Id))"></MatIconButton>
                        <MatIconButton Icon="delete" OnClick="@((e) => Delete(@context.Id))"></MatIconButton>
                    </div>
                </td>
                <td><div style="width:130px;">@context.UserName</div></td>
                <td>@context.Email</td>
                <td>
                    <MatChipSet>
                        @if (@context.Roles != null)
                                {
                            @foreach (var role in @context.Roles)
                                    {
                                <MatChip Label="@role"></MatChip>
                                    }
                            /**/
                                }
                    </MatChipSet>
                </td>
            </MatTableRow>
        </MatTable>
    }

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Create User</MatDialogTitle>
        <MatDialogContent>
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-value="@registerParameters.UserName" Label="Username" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-value="@registerParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-value="@registerParameters.PasswordConfirm" Label="Password Confirmation" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                </div>
            </fieldset>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
            <MatButton OnClick="@CreateUser">Create User</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@dialogIsEdit">
        <MatDialogTitle>Edit User</MatDialogTitle>
        <MatDialogContent>
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-value="@objRef.UserName" Label="Username" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-value="@objRef.EmailAddress" Label="Email" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-value="@objRef.Name" Label="Name" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
            </fieldset>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsEdit = false; })">Cancel</MatButton>
            <MatButton OnClick="@(e => { dialogIsEdit = false; })">Update</MatButton>
        </MatDialogActions>
    </MatDialog>
}
else
{
    <LoadingBackground ShowLogoBox="true">
        <label>Unauthorized.. Please Login</label>
    </LoadingBackground>
}

@functions {
    bool dialogIsOpen = false;
    bool dialogIsEdit = false;
    protected bool IsLoggedIn;
    DemoUser[] users;
    List<UserDto> userDtos = new List<UserDto>();
    UserDto objRef = new UserDto { Name = "ABCD", EmailAddress= "Abcd@abcd.com"};
    RegisterParameters registerParameters { get; set; } = new RegisterParameters();

    protected override async Task OnInitAsync()
    {
        IsLoggedIn = await authState.IsLoggedIn();
        var usersTmp = await abpCoreService.UserGetAllAsync();
        if (usersTmp != null && usersTmp.Count > 0)
        {
            // userDtos = usersTmp;
            List<DemoUser> demoUsersTmp = new List<DemoUser>();
            foreach (var u in usersTmp)
            {
                DemoUser dmUser = new DemoUser
                {
                    Id = (int)u.Id,
                    UserName = u.UserName,
                    Email = u.EmailAddress,
                };
                demoUsersTmp.Add(dmUser);
            }
            users = demoUsersTmp.ToArray<DemoUser>();
            Console.WriteLine($"Total User:{users.Length}");
        }
    }

    public void OpenDialog()
    {
        dialogIsOpen = true;
    }

    async Task CreateUser()
    {
        dialogIsOpen = false;
        try
        {
            //Todo Create AdminUserModel and update this for AdminUserModel
            await authState.Register(registerParameters);
            matToaster.Add("Not Implemented", MatToastType.Success, "User Creation Sucessful");
            //Todo Add User & refresh user list
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "User Creation Failed");
        }
    }

    public void Edit(int Id)
    {
        //objRef = null;
        //foreach (var obj in userDtos)
        //{
        //    if (obj.Id == Id)
        //    {
        //        objRef = obj;
        //        break;
        //    }
        //}
        //matToaster.Add($"Not Implemented Edit {Id}", MatToastType.Danger, "User Edit Failed");

        if (objRef != null)
        {
            dialogIsEdit = true;
            Console.Write($"Edit User:{Id} {objRef.EmailAddress}");
            StateHasChanged();
        }
    }

    public void Delete(int Id)
    {
        matToaster.Add($"Not Implemented {Id}", MatToastType.Danger, "User Delete Failed");
    }
}
